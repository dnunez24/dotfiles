#!/usr/bin/env bash

set -e

TAG="${1:-personal}"
PLATFORM="$( uname -s | awk '{print tolower($0)}' )"
SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DOTFILES_DIR="$( cd "${SOURCE_DIR}/.." && pwd )"
PACK_VERSION="0.2.0"
NPM_PACKAGE_MANIFEST="${HOME}/.config/npm/packages"
VSCODE_PACKAGE_MANIFEST="${HOME}/.config/vscode/extensions"

function set_os_defaults() {
  case "$1" in
    "darwin" )
      # shellcheck source=../tag-darwin/macos-defaults
      source "$HOME/.macos-defaults"
      ;;
    * )
      echo "Platform not yet supported"
      return 1
      ;;
  esac
}

function install_homebrew_packages() {
  if ! which -s brew; then
    echo "brew executable unavailable"
    return 1
  fi

  # Install bundled Homebrew packages
  test -f "$HOME/.Brewfile" && brew bundle --global
  test -f "$HOME/.Brewfile.local" && brew bundle --file="$HOME/.Brewfile.local"

  return 0
}

function install_composer_packages() {
  if ! which -s composer; then
    echo "composer executable unavailable"
    return 1
  fi

  # TODO: Check for global composer file

  # Install global Composer packages
  composer global install --prefer-dist

  return 0
}

function install_vscode_packages() {
  if ! which -s code; then
    echo "VS Code CLI not available to manage extensions"
    return 1
  fi

  if [[ ! -e "$1" ]]; then
    echo "VS Code extension manifest not found"
    return 1
  fi

  # Install VS Code editor packages
  cat "$1" | xargs -L1 code --force --install-extension

  return 0
}

# function install_fish_plugins() {
#   if ! which -s fish; then
#     echo "fish shell unavailable"
#     return 1
#   fi

#   local fisher_url="https://git.io/fisher"
#   local fisher_dest="$HOME/.config/fish/functions/fisher.fish"

#   # Install Fisherman plugin manager
#   curl -Lo "$fisher_dest" --create-dirs $fisher_url

#   # Install Fisherman plugins
#   fish -c 'fisher'

#   return 0
# }

function install_vim_plugins() {
  # Install pack to manage vim plugins (https://github.com/maralla/pack)
  # TODO: Set URL var based on platform (and arch?)
  local pack_url="https://github.com/maralla/pack/releases/download/v${PACK_VERSION}/pack-v${PACK_VERSION}-x86_64-apple-darwin.tar.gz"
  local pack_archive="/tmp/pack.tar.gz"

  curl -sSL $pack_url -o $pack_archive
  tar -vxf $pack_archive -C /usr/local/bin pack
  rm $pack_archive

  if ! which -s pack; then
    echo "pack executable unavailable"
    return 1
  fi

  # Install vim plugins
  pack install

  return 0
}

function install_homebrew() {
  local homebrew="$(which brew)"

  if [[ -n $homebrew ]]; then
    echo "Homebrew is already installed. Skipping install."
    return 0
  fi

  # Install Homebrew
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

  if ! which -s brew; then
    echo "Bootstrap failed. Could not find Homebrew executable."
    return 1
  fi

  return 0
}

function install_oh_my_zsh() {
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
}

function set_default_shell() {
  # Add zsh to list of available shells
  if ! grep -q zsh /etc/shells; then
    echo "/bin/zsh" | sudo tee -a /etc/shells > /dev/null
  fi

  # Set zsh as default shell
  if [[ ! "$SHELL" = "/bin/zsh" ]]; then
    chsh -s "/bin/zsh" "$USER"
  fi

  return 0
}

function install_npm_packages() {
  if ! which -s npm; then
    echo "npm executable unavailable"
    return 1
  fi

  if [[ ! -e "$1" ]]; then
    echo "npm package manifest not found"
    return 1
  fi

  # Update npm
  echo "Update global npm version"
  npm install -g npm

  # Install npm global packages
  echo "Install global npm packages"
  cat "${NPM_PKGS}" | xargs -L1 npm install --global

  return 0
}

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

install_homebrew

# Install RC manager to link dotfiles
brew tap thoughtbot/formulae
brew install rcm
brew install node

# link this directory to ~/.dotfiles
ln -snf "$DOTFILES_DIR" "$HOME/.dotfiles"

# link dotfiles to home directory
env RCRC="${DOTFILES_DIR}/rcrc" rcup -t "$TAG" -t "$PLATFORM"

install_homebrew_packages
xcodebuild -runFirstLaunch
install_npm_packages "$NPM_PACKAGE_MANIFEST" || exit $?
install_vscode_packages "$VSCODE_PACKAGE_MANIFEST" || exit $?
# install_composer_packages || exit $?
# install_fish_plugins || exit $?
install_vim_plugins || exit $?
# set_os_defaults "$PLATFORM" || exit $?
install_oh_my_zsh
set_default_shell
