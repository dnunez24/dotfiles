[alias]

  a = add
  # modify the previous commit (including message)
  amend = commit -a --amend
  # add via interactive patch mode
  ap = add -p
  br = branch
  # show all branches (including remotes)
  bra = branch -a
  c = commit
  # Amend the previous commit
  ca = commit --amend
  # Create new branch and checkout
  cb = checkout -b
  cl = clone
  # Cleanup git files (but bail early if not needed)
  clean = gc --auto
  # Commit with intent to rebase with autosquash
  cf = commit --fixup
  # Commit with short message
  cm = commit -m
  # Commit with intent to rebase with autosquash (plus a message)
  cms = commit --squash -m
  co = checkout
  cp = cherry-pick
  # Commit with intent to rebase with autosquash
  cs = commit --squash
  dt = difftool
  # diff staged changes against HEAD (or given ref)
  dc = diff --cached
  dsf = "diff --color"
  # Add staged files to the previous commit without changing the message
  forgot = commit --amend --no-edit
  # show commit history as a graph
  graph = log --graph --oneline --decorate --date=relative --all
  # reset to a clean working directory and index (changes discarded)
  hard = reset --hard
  # show the last commit from the log
  last = log -1 HEAD
  # list aliases
  la = "!git config -l | grep alias | cut -c 7-"
  ls = log --pretty=list --date=short --no-merges
  mt = mergetool
  p = push
  # generate output for a patch
  patch = !git --no-pager diff --no-color
  pr = pull --rebase
  pf = push --force-with-lease
  po = remote prune origin
  pt = push --tags
  # add remote origin tracking branch master
  raom = remote add origin main
  rename = branch -m
  ri = rebase --interactive
  rs = reset
  rt = remote -v
  sa = stash apply
  # adds all changes including untracked files and creates a commit
  save  = "!git add -A && git commit -m 'WIP'"
  sl = stash list
  ss = stash save
  ssu = stash save -u
  # show succinct status
  st = status -s
  # resets the previous commit, but keeps all the changes from that commit in the working directory
  undo = reset HEAD~1 --mixed
  # removes a file or files from the index (unstages it)
  unstage = reset HEAD --
  unwip = "!git reset --soft HEAD~1 && git unstage"
  viz = !gitup
  # commits only tracked changes with the WIP message
  wip = commit -am 'WIP'

[commit]

  verbose = true
  gpgsign = true

[core]

  autocrlf = input
  editor = code --wait

  # Use custom `.gitignore`, `.gitattributes` and hooks
  attributesfile = ~/.config/git/attributes
  excludesfile = ~/.config/git/ignore
  hooksPath = ~/.config/git/hooks

  pager = ""

  [pager]
    dsf = "diff-so-fancy | less --tabs=4 -RFXS --pattern '^(Date|added|deleted|modified): '"

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = "11"
  frag = "magenta bold"
  func = "146 bold"
  commit = "yellow bold"
  old = "red bold"
  new = "green bold"
  whitespace = "red reverse"

[color "diff-highlight"]

  oldNormal = "red bold"
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[credential]

  helper = osxkeychain

[diff]

  tool = vscode
  # Detect copies as well as renames
  renames = copies

[difftool]

  prompt = false

[difftool "ksdiff"]

  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[difftool "vscode"]

  cmd = code --wait --reuse-window --diff $LOCAL $REMOTE

[format]

  pretty = list

[filter "media"]

  required = true
  clean = git media clean %f
  smudge = git media smudge %f

[filter "lfs"]

  clean = git lfs clean %f
  smudge = git lfs smudge %f
  required = true

[gpg]

  format = ssh

[gpg "ssh"]

  program = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign"

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[include]

  path = ~/.gitconfig.local

[init]

  templateDir = ~/.config/git/templates
	defaultBranch = main

[merge]

  tool = vscode

[mergetool]

  prompt = false

[mergetool "ksdiff"]

  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustexitcode = true

[mergetool "vscode"]

  cmd = code --wait --reuse-window $MERGED

[pretty]

  list = "%C(yellow)%h %C(blue)%ad %C(cyan)%<(20,trunc)%an %C(white)%s%C(red)%d"

[push]

  default = current
  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[rebase]

  autosquash = true

[user]
  name = Dave Nunez

[pull]
	rebase = true
